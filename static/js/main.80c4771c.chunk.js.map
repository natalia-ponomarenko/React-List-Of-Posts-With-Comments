{"version":3,"sources":["components/PostsList/PostsList.jsx","api/api.js","components/Loader/Loader.jsx","components/NewCommentForm/NewCommentForm.jsx","components/PostDetails/PostDetails.jsx","App.jsx","index.js"],"names":["PostsList","posts","selectPost","selectedPostId","className","map","post","key","id","userId","title","type","onClick","BASE_URL","request","url","options","fetch","then","result","ok","Error","json","createComment","newComment","data","method","headers","body","JSON","stringify","removeComment","commentId","Loader","uuid","require","NewCommentForm","addComment","useState","userName","setName","email","setEmail","setBody","handleInputChange","event","callback","target","value","handleSubmit","a","preventDefault","postId","name","onSubmit","placeholder","onChange","required","PostDetails","postDetails","setPostDetails","comments","setComments","areCommentsVisible","setCommentsVisible","useEffect","response","filteredComments","filter","comment","createdAt","substring","updatedAt","length","prevComments","App","setPosts","setSelectedPostId","users","setUsers","selectedUser","setSelectedUser","sortedUsers","useMemo","sort","previous","next","Number","user","PostId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.80c4771c.chunk.js","sourcesContent":["import React from 'react';\nimport './PostsList.scss';\nimport PropTypes from 'prop-types';\n\nexport const PostsList = ({ posts, selectPost, selectedPostId }) => (\n  <div className=\"PostsList\">\n    <h2>Posts:</h2>\n    <ul className=\"PostsList__list\">\n      {posts.map(post => (\n        <li key={post.id} className=\"PostsList__item\">\n          <div>\n            <b>\n              [User #\n              {post.userId}\n              ]:\n              {' '}\n            </b>\n            {post.title}\n          </div>\n          {selectedPostId === post.id ? (\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={() => {\n                selectPost(0);\n              }}\n            >\n              Close\n            </button>\n          ) : (\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={() => {\n                selectPost(post.id);\n              }}\n            >\n              Open\n            </button>\n          )\n          }\n        </li>\n      ))}\n    </ul>\n  </div>\n);\n\nPostsList.propTypes = {\n  posts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      userId: PropTypes.number.isRequired,\n      title: PropTypes.string,\n      body: PropTypes.string,\n      createdAt: PropTypes.string.isRequired,\n      updatedAt: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n  selectPost: PropTypes.func.isRequired,\n  selectedPostId: PropTypes.number.isRequired,\n};\n","export const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const request = (\n  url, options = {},\n) => fetch(`${BASE_URL}/${url}`, options)\n  .then((result) => {\n    if (!result.ok) {\n      throw new Error('Data wasn`t received');\n    }\n\n    return result.json();\n  });\n\nexport const post = (url, data) => request(url, {\n  method: 'POST',\n  headers: {\n    'Content-type': 'application/json; charset=UTF-8',\n  },\n  body: JSON.stringify(data),\n});\n\nconst remove = url => request(url, {\n  method: 'DELETE',\n});\n\nexport const createComment = newComment => post('comments', newComment);\n\nexport const getUsers = () => request('users').then(response => response.data);\n\nexport const getPosts = () => request('posts').then(response => response.data);\n\nexport const getUserPosts = userId => request(`posts?userId=${userId}`)\n  .then(response => response.data);\n\nexport const getPostDetails = postId => request(`posts/${postId}`)\n  .then(response => response.data);\n\nexport const getPostComments = () => request('comments')\n  .then(response => response.data);\n\nexport const removeComment = commentId => remove(`comments/${commentId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './NewCommentForm.scss';\nimport { createComment } from '../../api/api';\n\nconst { uuid } = require('uuidv4');\n\nexport const NewCommentForm = ({ selectedPostId, addComment }) => {\n  const [userName, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const handleInputChange = (event, callback) => {\n    const { value } = event.target;\n\n    callback(value);\n  };\n\n  const handleSubmit = async(event) => {\n    event.preventDefault();\n    const newComment = {\n      id: uuid(),\n      postId: selectedPostId,\n      name: userName,\n      email,\n      body,\n    };\n\n    await createComment(newComment);\n    addComment(newComment);\n\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={userName}\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          onChange={event => handleInputChange(event, setName)}\n          required\n        />\n      </div>\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          value={email}\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          onChange={event => handleInputChange(event, setEmail)}\n          required\n        />\n      </div>\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          value={body}\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          onChange={event => handleInputChange(event, setBody)}\n          required\n        />\n      </div>\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  selectedPostId: PropTypes.number.isRequired,\n  addComment: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport React, { useEffect, useState } from 'react';\nimport { getPostComments, getPostDetails, removeComment } from '../../api/api';\nimport { Loader } from '../Loader';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\nexport const PostDetails = ({ selectedPostId }) => {\n  const [postDetails, setPostDetails] = useState(null);\n  const [comments, setComments] = useState([]);\n  const [areCommentsVisible, setCommentsVisible] = useState(true);\n\n  useEffect(() => {\n    getPostDetails(selectedPostId).then(setPostDetails);\n  }, [selectedPostId]);\n\n  useEffect(() => {\n    getPostComments(selectedPostId).then(setComments);\n  }, [selectedPostId]);\n\n  if (postDetails === null) {\n    return <Loader />;\n  }\n\n  const filteredComments = comments.filter(\n    comment => comment.postId === selectedPostId,\n  );\n\n  const addComment = (newComment) => {\n    setComments(prevComments => [...prevComments, newComment]);\n  };\n\n  const deleteComment = (commentId) => {\n    removeComment(commentId);\n    setComments(prevComments => prevComments.filter(\n      comment => comment.id !== commentId,\n    ));\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n      <section className=\"PostDetails__post\">\n        <p>\n          Title:\n          {' '}\n          {postDetails.title}\n        </p>\n        <br />\n        <p>\n          Created:\n          {' '}\n          {postDetails.createdAt.substring(0, 10)}\n        </p>\n        <br />\n        <p>\n          Last update:\n          {' '}\n          {postDetails.updatedAt.substring(0, 10)}\n        </p>\n      </section>\n      <section className=\"PostDetails__comments\">\n        {areCommentsVisible ? (\n          <>\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={() => setCommentsVisible(false)}\n            >\n              Hide\n              {' '}\n              {filteredComments.length}\n              {' '}\n              {filteredComments.length > 1 || !filteredComments.length\n                ? 'comments'\n                : 'comment'\n              }\n            </button>\n            <ul className=\"PostDetails__list\">\n              {filteredComments.map(comment => (\n                <li key={comment.id} className=\"PostDetails__list-item\">\n                  <button\n                    type=\"button\"\n                    className=\"PostDetails__remove-button button\"\n                    onClick={() => deleteComment(comment.id)}\n                  >\n                    X\n                  </button>\n                  <p>{comment.body}</p>\n                </li>\n              ))}\n            </ul>\n          </>\n        ) : (\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={() => setCommentsVisible(true)}\n          >\n            Show\n            {' '}\n            {filteredComments.length}\n            {' '}\n            comments\n          </button>\n        )}\n      </section>\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            selectedPostId={selectedPostId}\n            comments={filteredComments}\n            addComment={addComment}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n\nPostDetails.propTypes = {\n  selectedPostId: PropTypes.number.isRequired,\n};\n","import React, { useEffect, useState, useMemo } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getPosts, getUsers, getUserPosts } from './api/api';\n\nconst App = () => {\n  const [posts, setPosts] = useState([]);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n  const [users, setUsers] = useState([]);\n  const [selectedUser, setSelectedUser] = useState(0);\n\n  useEffect(() => {\n    if (selectedUser !== 0) {\n      getUserPosts(selectedUser).then(setPosts);\n    } else {\n      getPosts().then(setPosts);\n    }\n  }, [selectedUser]);\n\n  useEffect(() => {\n    getUsers().then(setUsers);\n  }, []);\n\n  const sortedUsers = useMemo(\n    () => users.sort((previous, next) => (previous.id - next.id)),\n    [users],\n  );\n\n  const selectPost = (PostId) => {\n    setSelectedPostId(PostId);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n          <select\n            className=\"App__user-selector\"\n            onChange={event => setSelectedUser(Number(event.target.value))}\n          >\n            <option value={0}>\n              All\n            </option>\n            {sortedUsers.map(user => (\n              <option key={user.id} value={user.id}>\n                {user.name}\n                {' '}\n                User #\n                {user.id}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            selectPost={selectPost}\n            selectedPostId={selectedPostId}\n          />\n        </div>\n        <div className=\"App__content\">\n          {selectedPostId !== 0 && (\n          <PostDetails\n            selectedPostId={selectedPostId}\n          />\n          )}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}